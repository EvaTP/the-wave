// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role{
  id    Int    @id @default(autoincrement())
  role  String @unique
  role_description String
  // Relations
  users User[]  
}
model User {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  username  String   @unique
  country_user String
  email     String   @unique
  password  String   @unique
  url_userpicture String?
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // Relations : la colonne role_id dans la table Role est la FK de role_id dans la table User
  role Role @relation(fields: [role_id], references: [id])
  comments Comment[]
  likes Like[]
}
model Level{
  id          Int      @id @default(autoincrement())
  label       String
  // Relations
  spots Spot_level[]
}
model Spot_level{
  id          Int      @id @default(autoincrement())
  level_id    Int
  spot_id     Int
  // Relations
  level Level @relation(fields: [level_id], references: [id])
  spot Spot @relation(fields: [spot_id], references: [id])  
  // Index pour éviter qu'un spot ait deux fois le meme niveau
  @@unique([level_id, spot_id])
}

model Spot {
  id          Int      @id @default(autoincrement())
  name        String
  country_spot String
  lat         Decimal?
  lng         Decimal?
  url_spotpicture String?
  description String?
  best_season String?
  wave_type   String?
  tide        String?
  water_temperature String?
  crowd       String?
  dangers     String[] @default([])
  facilities  String[] @default([])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  // Relations
  spot_levels Spot_level[]
  comments Comment[]
  likes Like[]
  spot_hashtags Spot_hashtag[]
}

model Comment{
  id        Int      @id @default(autoincrement())
  content   String
  user_id   Int
  spot_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // Relations
  user User @relation(fields: [user_id], references: [id])
  spot Spot @relation(fields: [spot_id], references: [id])
}

model Like{
  id        Int      @id @default(autoincrement())
  user_id   Int
  spot_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // Relations
  user User @relation(fields: [user_id], references: [id])
  spot Spot @relation(fields: [spot_id], references: [id])
  // éviter qu'un user like deux fois le même spot
  @@unique([user_id, spot_id])
}

model Hashtag{
  id        Int      @id @default(autoincrement())
  tagname   String   @unique
  // Relations
  spots Spot_hashtag[]
}

model Spot_hashtag{
  id        Int      @id @default(autoincrement())
  spot_id   Int
  hashtag_id Int
  // Relations
  hashtag Hashtag @relation(fields: [hashtag_id], references: [id])
  spot Spot @relation(fields: [spot_id], references: [id])
  // éviter qu'un spot ait deux fois le même hashtag
  @@unique([spot_id, hashtag_id])
}